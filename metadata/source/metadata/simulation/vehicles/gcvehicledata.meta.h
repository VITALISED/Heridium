#pragma once
#include "../../../../../../../pch.h"

class cGcVehicleData
{
    static const unsigned __int64 muNameHash = 0x904DB42CF570F4BB;
    static const unsigned __int64 muTemplateHash = 0xB5249A3FF5B2717C;
    static const int miNumMembers = 142;

    TkID<128> mName;
    int miNumWheels;
    float mfWheelRadius;
    float mfWheelGuardExtraRadius;
    float mfWheelGuardExtraHeight;
    float mfWheelGuardAdjustUpwards;
    float mfUnderwaterEnginePower;
    float mfUnderwaterEngineMaxSpeed;
    float mfUnderwaterEngineFalloff;
    float mfUnderwaterEngineDirectionBrake;
    float mfUnderwaterEngineDirectionBrakeVertical;
    float mfUnderwaterAlignDir;
    float mfUnderwaterAlignUp;
    float mfVisualRollAmount;
    float mfVisualRollOffsetY;
    float mfSteeringWheelSpringMultiplier;
    float mfSteeringWheelPushRange;
    cTkFixedArray<cTkVector> maWheelLocs;
    cTkFixedArray<cTkFixedString<32,char> > maWheelNames;
    cTkFixedArray<cTkFixedString<32,char> > maWheelSuspensionNames;
    cTkFixedArray<float> maWheelRayFakeWidthFactor;
    cTkFixedArray<float> maWheelRadiusMultiplier;
    cTkFixedArray<TkID<128> > maSuspensionAnimNames;
    bool mbCustomCollision;
    cTkVector mCollOffset;
    cTkVector mExtraCollOffset;
    cTkVector mCollDimensions;
    cTkVector mInertiaDimensions;
    float mfCollRadius;
    float mfInertiaMul;
    float mfWheelSuspensionlength;
    float mfWheelSuspensionForce;
    float mfWheelSuspensionDamping;
    float mfWheelSuspensionAnimMin;
    float mfWheelSuspensionAnimMax;
    float mfTopSpeedForward;
    float mfTopSpeedReverse;
    float mfWheelMaxAccelForceForward;
    float mfWheelMaxAccelForceReverse;
    float mfWheelMaxDecelForceNonBraking;
    float mfWheelMaxDecelForceBraking;
    float mfWheelSpinniness;
    float mfWheelDragginess;
    float mfHardStopSpeedThreshold;
    float mfWheelFrontFrictionOmega;
    float mfWheelFrontFrictionDynamic;
    float mfWheelFrontFrictionDynamicThreshold;
    float mfWheelFrontFrictionStatic;
    float mfWheelFrontFrictionStaticThreshold;
    float mfWheelSideFrictionOmega;
    float mfWheelSideFrictionDynamic;
    float mfWheelSideFrictionDynamicThreshold;
    float mfWheelSideFrictionStatic;
    float mfWheelSideFrictionStaticThreshold;
    bool mbLockVehicleAxis;
    float mfTurningWheelForce;
    float mfTurningWheelForceDamperVR;
    float mfTurningWheelFrictionOmega;
    float mfTurningWheelFrictionNonBraking;
    float mfTurningWheelFrictionBraking;
    cTkVector mWheelForwardAngularFactor;
    cTkVector mWheelTurnAngularFactor;
    cTkVector mWheelSuspensionAngularFactor;
    cTkVector mWheelSideAngularFactor;
    float mfVehicleGravity;
    float mfVehicleGravityWater;
    float mfVehicleJumpForce;
    float mfVehicleJumpAirControlForce;
    float mfVehicleBoostForce;
    float mfVehicleBoostMaxSpeed;
    float mfVehicleBoostExtraMaxSpeedAir;
    float mfVehicleBoostSpeedFalloff;
    float mfVehicleBoostTime;
    float mfVehicleBoostRechargeTime;
    float mfVehicleJumpAirRotateXAmount;
    float mfVehicleJumpAirRotateZAmount;
    float mfVehicleJumpAirRotateTimeMin;
    float mfVehicleJumpAirRotateTimeMax;
    float mfVehicleJumpAirMaxTorque;
    bool mbUseBuggySuspensionHack;
    bool mbUseRoverWheelHack;
    TkID<128> mSideSkidParticle;
    float mfSideSkidParticleMinRate;
    float mfSideSkidParticleMaxRate;
    float mfSideSkidParticleMinThresh;
    float mfSideSkidParticleMaxThresh;
    TkID<128> mWheelSpinParticle;
    float mfWheelSpinParticleMinRate;
    float mfWheelSpinParticleMaxRate;
    float mfWheelSpinParticleMinThresh;
    float mfWheelSpinParticleMaxThresh;
    float mfWheelGuardVerticalResponseMin;
    float mfWheelGuardVerticalResponseMax;
    float mfWheelGuardPenetrationScaleMin;
    float mfWheelGuardPenetrationScaleMax;
    float mfWheelGuardPenetrationScaleMinClamp;
    float mfWheelGuardMassScaleMin;
    float mfWheelGuardMassScaleMax;
    float mfWheelGuardMassScaleMinClamp;
    float mfVehicleLinearDampingGround;
    float mfVehicleAngularDampingGround;
    float mfVehicleLinearDampingAerial;
    float mfVehicleAngularDampingAerial;
    float mfVehicleLinearDampingWater;
    float mfVehicleAngularDampingWater;
    float mfWheelStartHeight;
    float mfWheelEndHeight;
    float mfVehicleComCheat;
    float mfVehicleAudioSpeedMul;
    float mfVehicleAudioTorqueMul;
    float mfVehicleAudioSideSkidMul;
    float mfVehicleAudioSideSkidThreshold;
    float mfVehicleAudioSpinSkidMul;
    float mfVehicleAudioSpinSkidThreshold;
    float mfAudioImpactSpeedThreshold;
    float mfAudioImpactSpeedMul;
    bool mbVehicleAudioSwapSkidAndSpeed;
    cTkFixedString<128,char> macAudioBoostStart;
    cTkFixedString<128,char> macAudioBoostStop;
    cTkFixedString<128,char> macAudioHornStart;
    cTkFixedString<128,char> macAudioHornStop;
    cTkFixedString<128,char> macAudioIdleExterior;
    cTkFixedString<128,char> macAudioImpacts;
    cTkFixedString<128,char> macAudioStart;
    cTkFixedString<128,char> macAudioStop;
    cTkFixedString<128,char> macAudioSuspension;
    cTkFixedString<128,char> macAudioJump;
    bool mbDriveOnTopOfWater;
    float mfVehicleUnderwaterRotateTime;
    float mfVehicleAudioSuspensionThreshold;
    float mfVehicleAudioSuspensionScale;
    int miNumGrassPushers;
    float mfWheelGrassPusherStrength;
    float mfWheelGrassPusherWobble;
    float mfWheelGrassPusherFrequency;
    float mfWheelGrassPusherReduce;
    cTkFixedArray<cTkVector> maWheelGrassPushers;
    float mfCreatureMassScale;
    cTkFixedArray<cTkFixedString<256,char> > maHeadlightNames;
    cTkFixedArray<cTkFixedString<256,char> > maVolumetricHeadlightNames;
    cTkFixedArray<cTkFixedString<256,char> > maCockpitHeadlightNames;
    float mfHeadlightIntensity;

    static bool ClassPointerCompare(const cTkClassPointer* lPtr, const cTkClassPointer *lOtherPtr);
    static void ClassPointerCopy(cTkClassPointer* lDest, const cTkClassPointer *lSource);
    static cTkClassPointer* ClassPointerCreate(cTkClassPointer* result);
    static void ClassPointerCreateDefault(cTkClassPointer* lPtr, cTkLinearMemoryPool* lpAllocator);
    static void ClassPointerDestroy(cTkClassPointer* lPtr);
    static void ClassPointerValidateData(cTkClassPointer* lPtr);
    static unsigned __int64 ClassPointerGenerateHash(const cTkClassPointer* lPtr, unsigned __int64 luHash, bool lbDeep);
    static void ClassPointerRead(cTkClassPointer* lPtr, XMLNode* lDataNode, cTkLinearMemoryPool* lpAllocator);
    static void ClassPointerRender(cTkClassPointer* lPtr);
    static bool ClassPointerSave(const cTkClassPointer* lPtr, const char* lpacFilename);
    static void ClassPointerWrite(const cTkClassPointer* lPtr, XMLNode* lDataNode, bool lbForceShortForm);
};
